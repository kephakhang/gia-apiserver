package kr.co.korbit.gia.jpa.korbit.model.dto

import kr.co.korbit.gia.jpa.common.UserStatus
import kr.co.korbit.gia.jpa.korbit.model.User
import org.springframework.security.core.GrantedAuthority
import org.springframework.security.core.authority.SimpleGrantedAuthority
import org.springframework.security.core.userdetails.UserDetails
import java.util.*


class UserPrincipalDto(val user: UserDto) : UserDetails {
    override fun getAuthorities(): Collection<GrantedAuthority> {
        val authorities: MutableList<GrantedAuthority> = ArrayList()

        // Extract list of permissions (name)
        user.permissionList.forEach { p ->
            val authority: GrantedAuthority = SimpleGrantedAuthority(p)
            authorities.add(authority)
        }

        // Extract list of roles (ROLE_name)
        user.roleList.forEach { p ->
            val authority: GrantedAuthority = SimpleGrantedAuthority("ROLE_$p")
            authorities.add(authority)
        }
        return authorities
    }

    override fun getPassword(): String {
        return user.password
    }

    override fun getUsername(): String {
        return user.email!!
    }

    override fun isAccountNonExpired(): Boolean {
        return true
    }

    override fun isAccountNonLocked(): Boolean {
        return true
    }

    override fun isCredentialsNonExpired(): Boolean {
        return true
    }

    override fun isEnabled(): Boolean {
        return user.status === UserStatus.registered
    }
}