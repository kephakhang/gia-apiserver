
buildscript {
    repositories {
        jcenter()
        maven { url = uri("https://plugins.gradle.org/m2/") }
        maven { url = uri("https://oss.jfrog.org/artifactory/oss-snapshot-local/") }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springboot_version"
        classpath "org.springframework.plugin:spring-plugin-core:$spring_plugin_version"
        classpath "io.spring.dependency-management:io.spring.dependency-management.gradle.plugin:$spring_management_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin.kapt:org.jetbrains.kotlin.kapt.gradle.plugin:$kotlin_version"
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:$querydsl_gradle_version"
    }

}

apply plugin: "kotlin"
apply plugin: "java"
apply plugin: "org.jetbrains.kotlin.plugin.spring"
apply plugin: "org.jetbrains.kotlin.plugin.jpa"
apply plugin: "kotlin-kapt"
apply plugin: "kotlin-jpa"
apply plugin: "org.jetbrains.kotlin.plugin.allopen"
apply plugin: "org.jetbrains.kotlin.plugin.noarg"
apply plugin: "com.ewerk.gradle.plugins.querydsl"

group 'kr.co.korbit'
version '0.0.1'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


repositories {

    jcenter()
    maven { url = uri("https://repo1.maven.org/maven2/") }
    maven { url = uri("https://plugins.gradle.org/m2/") }
    maven { url = uri("https://oss.jfrog.org/oss-snapshot-local/") }
}


dependencies {

    implementation("commons-io:commons-io:$commons_io_version")
    implementation("com.google.auth:google-auth-library-oauth2-http:$google_auth_version")
    implementation("com.google.firebase:firebase-admin:$firebase_admin_version")
    implementation("com.amazonaws:aws-java-sdk-s3:$aws_sdk_version")
//    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$fasterxml_version")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:$fasterxml_version")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:$fasterxml_version")

    implementation("org.apache.kafka:kafka-clients:$kafka_version")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core")
    implementation("com.typesafe:config:$type_safe_version")
    implementation("org.modelmapper:modelmapper:$model_mapper_verison")
    implementation("com.zaxxer:HikariCP:$hikaricp_version")
    implementation("io.github.microutils:kotlin-logging:$kotlin_logging_version")
    implementation("mysql:mysql-connector-java:$mysql_driver_version")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:$springboot_version")
    implementation("org.springframework.boot:spring-boot-starter-data-jdbc:$springboot_version")
    implementation("org.springframework.boot:spring-boot-starter-data-redis:$springboot_version")
    implementation("org.springframework.boot:spring-boot-starter-web:$springboot_version")
    implementation("org.springframework.boot:spring-boot-starter-web-services:$springboot_version")
    implementation("org.springframework.boot:spring-boot-starter-security:$springboot_version")
//    implementation("org.springframework:org.springframework.integration:spring-integration-core:$spring_version")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor:$springboot_version")
    implementation("org.springframework.security:spring-security-config")
    implementation("org.springframework.security:spring-security-web") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-timcat"
    }
    implementation("org.springframework.boot:spring-boot-starter-jetty:$springboot_version")
    implementation("org.springframework.security:spring-security-test")
//    implementation("com.auth0:java-jwt")
    implementation("org.springframework:spring-tx:$spring_tx_version")
    implementation("com.querydsl:querydsl-core:$querydsl_version")
    implementation("com.querydsl:querydsl-collections:$querydsl_version")
    implementation("com.querydsl:querydsl-jpa:$querydsl_version")
    implementation("com.google.dagger:dagger:$dagger_version")
    kapt("com.querydsl:querydsl-apt:$querydsl_version:jpa")
    kapt("com.google.dagger:dagger-compiler:$dagger_version")

    //ref : https://stackoverflow.com/questions/44046137/kapt-does-not-work-with-autovalue-in-android-studio-3-0
//    kapt("com.google.auto.value:auto-value:$auto_value_verison")

    // ref : https://github.com/springfox/springfox/issues/2899
//    implementation("io.springfox:springfox-boot-starter:$springfox_version")
    implementation("io.springfox:springfox-swagger2:$springfox_version")
    implementation("io.springfox:springfox-spring-web:$springfox_version")
    implementation("io.springfox:springfox-swagger-ui:$springfox_version")
    implementation("io.springfox.ui:springfox-swagger-ui-rfc6570:1.0.0") //https://github.com/springfox/springfox-swagger-ui-rfc6570
//    implementation("io.springfox:springfox-data-rest:$springfox_version")
//    implementation("io.springfox:springfox-swagger-common:$springfox_version")
    implementation("io.swagger:swagger-core:$swagger_version")
    implementation("org.webjars:webjars-locator:$webjars_version")
//    implementation("io.springfox:springfox-bean-validators:$springfox_version")
//    implementation("io.springfox:springfox-spring-webmvc:$springfox_version")
//    implementation("io.springfox:springfox-spring-integration-webmvc:$springfox_version")
    implementation("io.jsonwebtoken:jjwt-api:$jjwt_version")
    runtime("io.jsonwebtoken:jjwt-impl:$jjwt_version")
            // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms
    //runtime("org.bouncycastle:bcprov-jdk15on:$bcprov_version")
    runtime("io.jsonwebtoken:jjwt-jackson:$jjwt_version")

    implementation("com.github.gavlyukovskiy:p6spy-spring-boot-starter:$p5spy_version")
    testImplementation("junit:junit:$junit_version")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testCompile "com.nhaarman:mockito-kotlin-kt1.1:$mockito_version"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

allOpen {
    annotation "javax.persistence.Entity"
    annotation "javax.persistence.MappedSuperclass"
    annotation "javax.persistence.Embeddable"
}

noArg {
    annotation "javax.persistence.Entity"
    annotation "javax.persistence.MappedSuperclass"
    annotation "javax.persistence.Embeddable"
}

// ref : https://kotlinlang.org/docs/reference/kapt.html

kapt {
    // stubs are not needed in kapt3
    // generateStubs = true
//    mapDiagnosticLocations = true // 1.2.30 include the Kotlin files into error reports
    useBuildCache = false
    correctErrorTypes = true
}

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/sources/kapt/main"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.kotlin.srcDirs = ["src/main/kotlin", querydslDir]
    main.resources.srcDirs = ["src/main/resources"]
    test.kotlin.srcDirs = ["src/test/kotlin"]
    test.resources.srcDirs = ["src/test/resources"]
}

configurations {
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
//querydsl 추가 끝
