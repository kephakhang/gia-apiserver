

buildscript {
    repositories {
        jcenter()
        maven { url = uri("https://plugins.gradle.org/m2/") }
    }
    
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springboot_version"
//        classpath "org.springframework.plugin:spring-plugin-core:$spring_plugin_version"
        classpath "io.spring.dependency-management:io.spring.dependency-management.gradle.plugin:$spring_management_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadow_version"
    }

}

apply plugin: "kotlin"
apply plugin: "java"
apply plugin: "org.jetbrains.kotlin.plugin.spring"
apply plugin: "org.jetbrains.kotlin.plugin.jpa"
apply plugin: "kotlin-jpa"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "application"
apply plugin: "org.jetbrains.kotlin.plugin.allopen"
apply plugin: "org.jetbrains.kotlin.plugin.noarg"

group "kr.co.korbit"
version "0.0.1"
mainClassName = "kr.co.korbit.gia.Application"


sourceSets {
    main.kotlin.srcDirs = ["src/main/kotlin"]
    //main.kotlin.srcDirs = main.java.srcDirs = ["src/main/kotlin"]
    main.resources.srcDirs = ["src/main/resources", "src/main/resources-static", "src/main/resources-$profile"]
    test.kotlin.srcDirs = ["src/test/kotlin"]
    //test.kotlin.srcDirs = test.java.srcDirs = ["src/test/kotlin"]
    test.resources.srcDirs = ["src/test/resources"]
}

repositories {
//    mavenCentral()
//    mavenLocal()
    jcenter()
    maven { url = uri("https://kotlin.bintray.com/ktor") }
    maven { url = uri("https://plugins.gradle.org/m2/") }
    maven { url = uri("https://oss.jfrog.org/oss-snapshot-local/") }
}

dependencies {

    subprojects.forEach {
        implementation(project(it.path))
    }

    implementation("org.springframework.boot:spring-boot-starter-web:$springboot_version")
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")
    implementation("ch.qos.logback:logback-classic:$logback_version")
//    implementation("org.jetbrains.anko:anko-commons:$anko_version")
//    implementation("io.ktor:ktor-gson:$ktor_version"
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$ktor_version")
    implementation("com.sksamuel.hoplite:hoplite-core:$hoplite_version")
    implementation("com.sksamuel.hoplite:hoplite-yaml:$hoplite_version")
    implementation("org.apache.kafka:kafka-clients:$kafka_version")
//    implementation("io.springfox:springfox-swagger2:$springfox_version")
//    implementation("io.springfox:springfox-swagger-ui:$springfox_version")
    implementation("io.springfox:springfox-data-rest:$springfox_version")
    implementation("org.springframework.boot:spring-boot-starter-security:$springboot_version")
    implementation("org.springframework.security:spring-security-config")
//    implementation("io.springfox:springfox-swagger-common:$springfox_version")
//    implementation("io.springfox:springfox-bean-validators:$springfox_version")

    testImplementation("junit:junit:$junit_version")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
    testImplementation("com.nhaarman:mockito-kotlin-kt1.1:$mockito_version")
    testImplementation("org.springframework.boot:spring-boot-starter-test:$springboot_version")
//    implementation("io.ktor:ktor-jackson:$ktor_version"
//    implementation("io.github.microutils:kotlin-logging:$kotlin_logging_version"
}


// default enable
//kotlin.experimental.coroutines = 'enable'

shadowJar {
    baseName = 'gia-apiserver'
    classifier = null
    version = null
}

compileKotlin {
    kotlinOptions.freeCompilerArgs = ['-Xuse-experimental=kotlin.Experimental']
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

allOpen {
    annotation "javax.persistence.Entity"
    annotation "javax.persistence.MappedSuperclass"
    annotation "javax.persistence.Embeddable"
}

noArg {
    annotation "javax.persistence.Entity"
    annotation "javax.persistence.MappedSuperclass"
    annotation "javax.persistence.Embeddable"
}